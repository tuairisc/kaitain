/*
 * Vendor Property and Value Prefixes
 * ----------------------------------
 */

@mixin prefix($property, $value) {
    // Automatically add vendor prefixed to a CSS property.
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin prefix_value($property, $value) {
    // Automatically add vendor prefixed to a CSS value.
    #{$property}: -moz-#{$value};
    #{$property}: -ms-#{$value};
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

@mixin webkit($property, $value) {
    /* Flexbox rules need to be prefixed with -webkit for Safari Mobile. Using
     * the general prefix mixin for flexbox cluttered up the compiled CSS with 
     * useless rules. */
    -webkit-#{$property}: $value;
    #{$property}: $value;
}

@mixin webkit_value($property, $value) {
    #{$property}: -webkit-#{$value};
    #{$property}: $value;
}

/*
 * Social Images and Colours
 * -------------------------
 */

@mixin generate-social-links($element, $size, $sprites, $service: null) {
    /*
     * Generate social Links
     * ---------------------
     * I wanted to reduce the work (and load time) of ubiqui-cancerous social 
     * icons. So:
     * 
     * 1. This uses a SVG spritesheet and is tuned to interact with it.
     * 1a. If you ever alter the spritesheet then you will also need to alter
     *     the given background-posiiton rules in the array.
     * 2. This will generate square icons of arbitrary size. These aren't 
     *    responsive, because that requires a great deal of of CSS or JS. It
     *    just isn't possible to use truly dynamic sizes with a stylesheet in
     *    CSS without using JS to resize everything.
     * 3. Social media icons are /usually/ small and fixed in size, so #3 isn't
     *    a big problem for me. 
     * 4. Pick a size of at least 35 pixels and then externally decide what 
     *    content should display at different sizes.
     */

    $columns: 6;
    $rows: 3;

    $social-styles: (
        beard: (#343537, 0, 0),
        discuss: (#b9dfbc, 20%, 0),
        email: (#f5756c, 40%, 0),
        facebook: (#3B5998, 60%, 0),
        flickr: (#ff0084, 80%, 0),
        github: (#666666, 100%, 0),
        google: (#dd4b39, 0, 50%),
        instagram: (#3f729b, 20%, 50%),
        linkedin: (#0976b4, 40%, 50%),
        pinterest: (#cc2127, 60%, 50%),
        print: (#007aaf, 80%, 50%),
        reddit: (#ff5700, 100%, 50%),
        rss: (#ff6600, 0, 100%),
        search: (#000, 20%, 100%),
        share: (#000, 40%, 100%),
        tumblr: (#35465c, 60%, 100%),
        twitter: (#55acee, 80%, 100%),
        youtube: (#b31217, 100%, 100%) 
    );

    /* Can be a class, ID, element-whatever. #foo, .a or baz, or a[href^=fizz]
     * are all perfectly acceptable. */
    #{$element} {
        background-image: url($sprites);
        background-size: #{$size * $columns} #{$size * $rows};
        background-repeat: no-repeat;
        display: block;
        height: 0;
        padding-top: $size;
        width: $size;
    }

    @if ($service) {
        // If you supply a service, just output link for that.
        #{$element}.#{$service} {
            background-color: nth(map-get($social-styles, $service), 1);
            background-position: nth(map-get($social-styles, $service), 2) nth(map-get($social-styles, $service), 3);
        }
    } @else {
        // Else iterate map-list to produce social links.
        @each $map, $item in $social-styles {
            #{$element}.#{$map} {
                background-color: nth($item, 1);
                background-position: nth($item, 2) nth($item, 3);
            }
        }
    }
}

/*
 * Miscellaneous Mixins
 * --------------------
 */

@mixin flex_size($width, $ratio) {
    // Ratio should be between 0 and foo.
    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}
 
@mixin vertical_center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@function rgba_opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    // I do not intend for this to be called directly. 
    // This function inverts RGB colours.
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    @include prefix(column-count, $count);
    @include prefix(column-gap, $gap);
}

@mixin placeholder_style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin light_mask($opacity) {
    background-color: rgba(255,255,255,$opacity);
}

@mixin dark_mask($opacity) {
    background-color: rgba(0,0,0,$opacity);
}